datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model Contact {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  name      String
  email     String
  message   String
}

enum Role {
  ADMIN
  USER
}

model User {
  id                  String       @id @default(cuid())
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @default(now()) @updatedAt
  email               String       @unique
  hashedPassword      String?
  salt                String?
  resetToken          String?
  resetTokenExpiresAt DateTime?
  verified            Boolean      @default(false)
  verifiedToken       String?
  roles               Role         @default(USER)
  audits              Audit[]
  userProfile         UserProfile?
  avatar              Avatar?
  player              Player?
  team                Team[]
}

model UserProfile {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  userId    String   @unique
  firstname String?
  lastname  String?
  user      User     @relation(fields: [userId], references: [id])
}

model Audit {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  userId    String
  log       String
  user      User     @relation(fields: [userId], references: [id])
}

model Avatar {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
  avatarStyle     String
  topType         String
  accessoriesType String
  hatColor        String
  hairColor       String
  facialHairType  String
  facialHairColor String
  clotheType      String
  clotheColor     String
  graphicType     String
  eyeType         String
  eyebrowType     String
  mouthType       String
  skinColor       String
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id])
}

model Player {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id])
  teamId         String?
  team           Team?    @relation(fields: [teamId], references: [id])
  club           Club?    @relation(fields: [clubId], references: [id])
  clubId         String?
  isCoach        Boolean  @default(false)
  isActivePlayer Boolean  @default(false)
  // training        Training[]
  // trainingsScores TrainingsScore[]
}

model Team {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
  name            String   @unique
  players         Player[]
  club            Club?    @relation(fields: [clubId], references: [id])
  clubId          String?
  owner           User     @relation(fields: [ownerId], references: [id])
  ownerId         String
  invitationToken String?

  // Season    Season[]
}

model Club {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  name      String
  teams     Team[]
  players   Player[]
}

// model Training {
//   id             String           @id @default(cuid())
//   createdAt      DateTime         @default(now())
//   updatedAt      DateTime         @default(now()) @updatedAt
//   trainingsDate  DateTime
//   trainingsScore TrainingsScore[]
//   Season         Season?          @relation(fields: [seasonId], references: [id])
//   seasonId       String?
//   Player         Player?          @relation(fields: [playerId], references: [id])
//   playerId       String?
// }

// model TrainingsScore {
//   id         String    @id @default(cuid())
//   Training   Training? @relation(fields: [trainingId], references: [id])
//   trainingId String?
//   score      Int
//   createdAt  DateTime  @default(now())
//   updatedAt  DateTime  @default(now()) @updatedAt
//   Player     Player?   @relation(fields: [playerId], references: [id])
//   playerId   String?
// }

// model Season {
//   id        String     @id @default(cuid())
//   createdAt DateTime   @default(now())
//   updatedAt DateTime   @default(now()) @updatedAt
//   name      String
//   trainings Training[]
//   Team      Team       @relation(fields: [teamId], references: [id])
//   teamId    String
// }
